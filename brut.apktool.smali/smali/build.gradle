/*
 * Copyright 2012, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

apply plugin: 'antlr'
apply plugin: 'jflex'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath depends.jflex_plugin
        classpath depends.proguard_gradle
    }
}

configurations {
    // Remove the full antlr library that's added by the antlr plugin. We manually
    // add the smaller antlr_runtime library instead
    compile.exclude group: 'org.antlr', module: 'antlr'

    // The jflex lexer doesn't have any runtime dependencies, so remove the dependency
    // that gets added by the jflex plugin
    compile.exclude group: 'de.jflex', module: 'jflex'
}

idea {
    module {
        excludeDirs -= buildDir
        if (buildDir.exists()) {
            excludeDirs.addAll(buildDir.listFiles())
        }
        for (sourceDir in (sourceDirs + testSourceDirs)) {
            excludeDirs.remove(sourceDir);
            while ((sourceDir = sourceDir.getParentFile()) != null) {
                excludeDirs.remove(sourceDir);
            }
        }
    }
}

dependencies {
    compile project(':brut.apktool.smali:util')
    compile project(':brut.apktool.smali:dexlib2')
    compile depends.antlr_runtime
    compile depends.stringtemplate
    compile depends.commons_cli

    testCompile depends.junit

    antlr depends.antlr
    jflex depends.jflex
}

processResources.inputs.property('version', version)
processResources.expand('version': version)

// build a jar containing all dependencies
task fatJar (type: Jar) {
    from sourceSets.main.output
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    manifest {
        attributes('Main-Class': 'org.jf.smali.main')
    }
}
tasks.getByPath('build').dependsOn(fatJar)

generateTestGrammarSource {
    outputDirectory = new File(outputDirectory, 'org/jf/smali')
}

generateGrammarSource {
    outputDirectory = new File(outputDirectory, 'org/jf/smali')
}

generateJFlexSource {
    outputDirectory = new File(outputDirectory, 'org/jf/smali')
}

task proguard(type: proguard.gradle.ProGuardTask, dependsOn: fatJar) {
    def outFile = fatJar.destinationDir.getPath() + '/' + fatJar.baseName + '-' +
            fatJar.version + '-small' + '.' + fatJar.extension

    injars fatJar.archivePath
    outjars outFile

    libraryjars "${System.properties['java.home']}/lib/rt.jar"

    dontobfuscate
    dontoptimize

    keep 'public class org.jf.smali.main { public static void main(java.lang.String[]); }'
    keepclassmembers 'enum * { public static **[] values(); public static ** valueOf(java.lang.String); }'

    dontwarn 'com.google.common.**'
    dontnote 'com.google.common.**'
}

tasks.getByPath(':release').dependsOn(proguard)
